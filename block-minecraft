#!/usr/bin/env python

# usage: $ block-minecraft minecraft.example.com:25565 minecraft.example.org
# depends: python

# adapted from
# - https://gist.github.com/mid-kid/5eaefdbf6107f5253d86#file-minecraft-chat-client-py-L32
# - https://gist.github.com/barneygale/1209061

# see also
# - https://wiki.vg/Protocol
# - https://wiki.vg/Server_List_Ping

import json, socket, sys
from struct import pack, unpack

def varint_pack(d):
    o = b''
    while True:
        b = d & 0x7F
        d >>= 7
        o += pack('B', b | (0x80 if d > 0 else 0))
        if d == 0:
            break
    return o

def varint_unpack(s):
    d, l = 0, 0
    length = len(s)
    if length > 5:
        length = 5
    for i in range(length):
        l += 1
        b = s[i]
        d |= (b & 0x7F) << 7 * i
        if not b & 0x80:
            break
    return (d, s[l:])

def field_pack(data):
    return varint_pack(len(data)) + data

def field_unpack(bytes):
    length, bytes = varint_unpack(bytes)
    return bytes[:length], length

_register = {
    'encoder': {},
    'decoder': {},
}

def register(type, pack_id):
    if isinstance(pack_id, str):
        pack_id = int(pack_id, 16)
    def f(fn):
        fn.pack_name = fn.__name__
        fn.pack_id = pack_id
        _register[type][(fn.pack_name if type == 'encoder' else fn.pack_id)] = fn
        return fn
    return f

def encode(pack_name, *args, **kwargs):
    f = _register['encoder'][pack_name]
    pack_id = varint_pack(f.pack_id)
    data = f(*args, **kwargs)
    return field_pack(pack_id + data)

def decode(data):
    data, _ = field_unpack(data)
    pack_id, data = varint_unpack(data)
    f = _register['decoder'][pack_id]
    return f.pack_name, f(data)

@register('encoder', '0x0')
def handshake(host, port, version=0, next=1):
    version = varint_pack(version)
    host = field_pack(host.encode('utf-8'))
    port = pack('!H', port)
    next = varint_pack(next)
    return version + host + port + next

@register('encoder', '0x0')
def status():
    return bytes()

@register('decoder', '0x0')
def status(data):
    data, _ = field_unpack(data)
    return json.loads(data)

servers = [(*x.split(':'), 25565)[:2] for x in sys.argv[1:]]
servers = [(host, int(port)) for (host, port) in servers]

msg = 'ðŸŽ®ï¸Ž'
for host, port in servers:
    msg += f' {host}:' if len(servers) > 1 else ' '
    status = '{}'
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(1)
        try:
            s.connect((host, port))
            s.send(encode('handshake', host, port))
            s.send(encode('status'))

            _, data = decode(s.recv(3000))
            # sample answer:
            # {'description': {'text': 'A Minecraft Server'},
            #                  'players': {'max': 20, 'online': 0},
            #  'version': {'name': '1.15.2', 'protocol': 578}}
            msg += f"{data['players']['online']}/{data['players']['max']}"

            if data['players']['online'] > 0:
                msg = '<active>' + msg + '</active>'

        except (ConnectionRefusedError, socket.gaierror):
            msg += '<error>unknown</error>'
        except socket.timeout:
            msg += '<warning>?/?</warning>'

print(msg)
